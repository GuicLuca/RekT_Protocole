name: Build and Package

on:
  push:
    branches:
      - main

jobs:
  build:
      strategy:
       matrix:
         toolchain: [stable, beta, nightly]
         os: [ubuntu-latest, windows-latest, macOS-latest]
         workdir: [RektBroker, RektCommon]
         
      runs-on: ${{ matrix.os }}

      steps:
        - name: Check out code
          uses: actions/checkout@v3
  
        - name: Set up rust toolchain
          uses: actions-rs/toolchain@v1
          with:
            toolchain: ${{ matrix.toolchain }}
        - name: Update toolchain
          run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
          working-directory: ${{ matrix.workdir }}
  
        - name: Install NASM (Linux)
          run: sudo apt-get update && sudo apt-get install -y nasm
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'ubuntu-latest' }}
  
        - name: Install NASM (MacOS)
          run: brew update && brew install nasm
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'macOS-latest' }}
  
        - name: Install winget (Windows)
          uses: Cyberboss/install-winget@v1
          if: ${{ matrix.os == 'windows-latest' }}
          
        - name: Install NASM (Windows)
          run: winget install nasm --disable-interactivity --accept-source-agreements
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'windows-latest' }}
    
        - name: Set NASM compiler path (Linux)
          run: export CMAKE_ASM_NASM_COMPILER=/usr/bin/nasm
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'ubuntu-latest' }}
    
        - name: Set NASM compiler path (MacOS)
          run: export CMAKE_ASM_NASM_COMPILER=/usr/local/bin/nasm
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'macOS-latest' }}
    
        - name: Set NASM compiler path (Windows)
          run: set CMAKE_ASM_NASM_COMPILER=C:\Program Files\NASM\nasm.exe
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'windows-latest' }}

        - name: Build for ${{ matrix.os }}
          run: cargo build --release
          working-directory: ${{ matrix.workdir }}
  
        - name: Create Zip File (Linux and macOS)
          run: zip -r ${{ matrix.workdir }}_${{ matrix.os }}_${{ matrix.toolchain }}.zip target/release/*
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os != 'windows-latest' }}
  
        - name: Create Zip File (Windows)
          run: 7z a ${{ matrix.workdir }}_${{ matrix.os }}_${{ matrix.toolchain }}.zip target/release/*
          working-directory: ${{ matrix.workdir }}
          if: ${{ matrix.os == 'windows-latest' }}
  
        - name: Upload Artifact
          uses: actions/upload-artifact@v4.6.0
          with:
            name: ${{ matrix.workdir }}_${{ matrix.os }}_${{ matrix.toolchain }}
            path: ${{ matrix.workdir }}/${{ matrix.workdir }}_${{ matrix.os }}_${{ matrix.toolchain }}.zip
            include-hidden-files: true
